// This file supports an experimental version of the grid that uses flexbox.
// It uses standard flexbox syntax. As such it's supported on chrome 29+, IE11, and FF 22+.
// However as of 11-16-13 FF doesn't support flex-wrap, so only single line
// rows are supported.
// http://caniuse.com/flexbox


//
// Grid Variables
//

//-------------------------------------------------------------------------------------------------
// grid variables for defaulting whether certain types of grid classes are generated
//
//
// $gridGenerateBasics:    generate basic grid classes like .oj-sm-1, .oj-sm-2, etc.
// $gridGenerateOffsets:   generate offset grid classes like .oj-sm-offset-1, .oj-sm-offset-2, etc.
// $gridGenerateCentering: generate centering grid classes like .oj-sm-center
// $gridGenerateOddEven:   generate odd and even grid classes like .oj-sm-odd-cols-1, 
//                         .oj-sm-odd-cols-2, etc.
// $gridGenerateOrdering:  generate order grid classes like .oj-sm-order-1, .oj-sm-order-2, etc.
//-------------------------------------------------------------------------------------------------
$gridGenerateBasics:    true !default;
$gridGenerateOffsets:   true !default;
$gridGenerateCentering: true !default;
$gridGenerateOddEven:   true !default;
$gridGenerateOrdering:  true !default;



//
// Grid Mixins
//

//-------------------------------------------------------------------------------------------------
// Create default, nested, and collapsed rows
// 
// $behavior - Any special beavior for this row? 
//             Options: nest, collapse, nest-collapse, false.
//             Default: false. 
//-------------------------------------------------------------------------------------------------
@mixin oj-grid-row($behavior: false) {

  // use @include oj-grid-row(nest); to include a nested row
  @if $behavior == nest {
    margin-left: -($gridColumnGutter/2);
    margin-right: -($gridColumnGutter/2);
    max-width: none;
    width: auto;
  }

  // use @include oj-grid-row(collapse); to collapsed a container row margins
  @else if $behavior == collapse {
    margin-left: 0;
    margin-right: 0;
    max-width: $gridMaxWidth;
    width: 100%;
  }

  // use @include oj-grid-row(nest-collapse); to collapse outer margins on a nested row
  @else if $behavior == nest-collapse {
    margin-left: 0;
    margin-right: 0;
    max-width: none;
    width: auto;
  }

  // use @include oj-grid-row; to use a container row
  @else {
    margin-left: auto;
    margin-right: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: $gridMaxWidth;
    width: 100%;
    @include oj-box-sizing-property(border-box);
    display: flex;
    flex-flow: row wrap;
    align-items: flex-start;
  }

}


//-------------------------------------------------------------------------------------------------
// For creating columns 
//
// $columns:   The number of columns this should be. Default: false
// $center:    Center these columns? Default: false.
// $offset:    # of columns to offset. Default: false.
// $order:     # of columns to order. Default: false.
// $padding:   left and right padding value on column. 
//             Null means use $gridColumnGutter/2. 
//             Default: null.
// $direction: what is the reading direction, 
//             Options: ltr and rtl. 
//             Default: ltr
//-------------------------------------------------------------------------------------------------
@mixin oj-grid-column($columns:   false, 
                      $offset:    false, 
                      $order:     false, 
                      $padding:   null,
                      $direction: ltr) 
{

  @if $padding == true {
    padding-left: $gridColumnGutter / 2;
    padding-right: $gridColumnGutter / 2;
  }
  // If padding, get rid of gutter padding
  @else if $padding != null {
    padding-left: $padding;
    padding-right: $padding;
  }

  // If a column number is given, calculate width
  @if $columns {
    width: percentage($columns/$gridTotalColumns);
  }

  // If offset, calculate appropriate margins
  @if $offset { 
    $offsetPercentage: $offset/$gridTotalColumns;
    $direction-start: oj-direction-start($direction);

    @if ($offsetPercentage == 0) { margin-#{$direction-start}: 0;}
    @else                        { margin-#{$direction-start}: percentage($offsetPercentage);}
  }

  // Source Ordering, adds left/right depending on which you use.
  @if $order { order: $order; }

}



//-------------------------------------------------------------------------------------------------
// generate grid classes that belong inside of media queries
//
//
// $selectorPrefix:    name of class prefix to use, i.e. "oj-sm" will generate .oj-sm-1, .oj-sm-2, etc.
// $generateBasics:    generate basic grid classes like .oj-sm-1, .oj-sm-2, etc.
// $generateOffsets:   generate offset grid classes like .oj-sm-offset-1, .oj-sm-offset-2, etc.
// $generateCentering: generate centering grid classes like .oj-sm-center
// $generateOddEven:   generate odd and even grid classes like .oj-sm-odd-cols-1, .oj-sm-odd-cols-2, etc.
// $generateOrdering:  generate order grid classes like .oj-sm-order-1, .oj-sm-order-2, etc.
//-------------------------------------------------------------------------------------------------
@mixin oj-grid-responsive($selectorPrefix, 
                          $generateBasics:    $gridGenerateBasics, 
                          $generateOffsets:   $gridGenerateOffsets, 
                          $generateCentering: $gridGenerateCentering,
                          $generateOddEven:   $gridGenerateOddEven,
                          $generateOrdering:  $gridGenerateOrdering) {


  @if ($generateBasics) {
    @for $i from 1 through $gridTotalColumns {
      .#{$selectorPrefix}-#{$i} { @include oj-grid-column($columns:$i); }
    }
  }

  @if ($generateOffsets) {
    @for $i from 0 through $gridTotalColumns - 1 {
      .#{$selectorPrefix}-offset-#{$i} {
        @include oj-ltr()
        {
          @include oj-grid-column($offset:$i, $direction:ltr);
        }
        @include oj-rtl()
        {
          @include oj-grid-column($offset:$i, $direction:rtl);
        }
      }
    }
  }

  @if ($generateOrdering)
  {
    @for $i from 0 through $gridTotalColumns - 1 {
      .#{$selectorPrefix}-order-#{$i} { @include oj-grid-column($order:$i); }
    }
  }

  @if ($generateCentering) {
    .#{$selectorPrefix}-center {
      justify-content: center; }
  }

  @if ($generateOddEven) {
    // only need to specify odd in a 2 column grid
    @for $i from 1 through $gridTotalColumns - 1 {

      .#{$selectorPrefix}-odd-cols-#{$i} > .oj-row > .oj-col:nth-child(odd) {
         @include oj-grid-column($i);
      }

      .#{$selectorPrefix}-odd-cols-#{$i} > .oj-row > .oj-col:nth-child(even) {
         @include oj-grid-column($gridTotalColumns - $i);
      }
    }


    // used for when there's 4+ columns
    @for $i from 1 through (($gridTotalColumns/2) - 1){

      .#{$selectorPrefix}-even-cols-#{$i} > .oj-row > .oj-col:nth-child(even) {
         @include oj-grid-column($i);
      }
    }
  }

}
