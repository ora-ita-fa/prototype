// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// WARNING: do not directly import this file, instead import the 
//          version in your base theme's directory, 
//          for example alta/widgets/_oj.alta.formcontrol.inputtextarea.scss
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@import "../../utilities/oj.utilities";
@import "oj.common.formcontrol.mixins";


// todo: talk to Pavitra about inline messages and whether she thinks we should have 
//       wrapper dom to support that case


@if $includeInputTextareaClasses != false {
  @include exports("common.inputtextarea") {

    // general css styles between the components
    .oj-inputtext,
    .oj-inputpassword,
    .oj-textarea {
      @include oj-form-control-content;
      @include oj-box-sizing-property(border-box);
      
      display: inline-block;
      font-family: inherit;
      font-size: $fontSize;
      font-weight: normal;
      
      /* use a width of 100% and then max and min width so that when 
         there's less room for the form control it can automatically 
         get smaller instead of overflowing its boundaries */
      max-width: $formControlLargeMaxWidth;
      min-width: $formControlMinWidth;
      width: 100%;
    }

    // specific css for inputtext + inputpassword
    .oj-inputtext,
    .oj-inputpassword {
      @include oj-normalize-text-input;
      
      height: $formControlHeight;
      padding: 0 $formControlPadding;
    }

    // specific css for textarea
    .oj-textarea {
      @include oj-normalize-textarea;
      
      height: auto;
      padding: $formControlPadding;
      resize: none; //unfortunately we can not turn off resize per corner, so need to turn it off
    }

    // Styling for invalid state
    .oj-inputtext.oj-invalid,
    .oj-inputpassword.oj-invalid,
    .oj-textarea.oj-invalid {
      border: $formControlMessagingBorderWidth solid $borderColorError; 
    }

    // Styling for warning state
    .oj-inputtext.oj-warning,
    .oj-inputpassword.oj-warning,
    .oj-textarea.oj-warning {
      border: $formControlMessagingBorderWidth solid $borderColorWarning; 
    }

    // When size is provided, set width to auto to allow proper sizing
    .oj-inputtext[size],
    .oj-inputpassword[size],
    .oj-textarea[size] {
      width: auto;
    }

    .oj-inputtext, .oj-inputpassword, .oj-textarea
    {
      @include oj-placeholder()
      {
        color: $formControlPlaceholderColor;
      }
    }

    // Styling for disabled state
    .oj-inputtext.oj-disabled,
    .oj-inputpassword.oj-disabled,
    .oj-textarea.oj-disabled {
      @include oj-form-control-content-disabled;
    }

    // Styling for readonly state, if supported in the future
    .oj-inputtext.oj-read-only,
    .oj-inputpassword.oj-read-only,
    .oj-textarea.oj-read-only {
      @include oj-form-control-content-readonly;
	  
	  padding: 0;
    }
	
	.oj-textarea.oj-read-only {
	  padding-top: 6px;
	}
  }
}