@import "oj.utilities.mixins.prefix";
@import "oj.utilities.mixins.misc";
@import "oj.utilities.mixins.bidi";

// There's a lot of Android devices out there that are half-way between the 
// legacy screen resolutions and retina (aka "xhdpi" in Google's terminology) 
// they use a 1.5 factor so the default device pixel ratio is 1.5

$defaultDevicePixelRatio: 1.5 !default;
$iconDisplay: inline-block !default;


//-------------------------------------------------------------------------------------------------
// This function returns an image url relative to the $imageDir variable
//-------------------------------------------------------------------------------------------------
@function oj-image-url($path)
{
  @if $path == null {@return null;}
  @else { @return url($imageDir + $path);}
}

//-------------------------------------------------------------------------------------------------
// This mixin just takes whatever content you give it and puts it in a media query 
// based on the devicePixelRatio you pass in.
//-------------------------------------------------------------------------------------------------
@mixin oj-icon-hi-res-media-query($devicePixelRatio: $defaultDevicePixelRatio,
                                  $queryMinWidth:    null,
                                  $queryMaxWidth:    null)
{

  // UX designers may specify high resolution images. If they specify both high and low resolution 
  // images then you will need to have a media query in the css. There's a bunch of different 
  // possible units and syntax for these media queries. Which to use?
  //
  // First let's look at the units, the resolution media query describes the resolution 
  // of the output device, and its unit can be
  //
  // - dpi (dots per inch)
  // - dpcm (dots per centimeter)
  // - dppx (dots per pixel, proposed for CSS3), not all browsers support this yet.
  //
  // 96dpi is equivalent to a device pixel ratio (DPR) of 1, so multiply the DPR by 96 
  // to get the value, for example if the DPR is 1.5 use 144dpi. Some browsers use the new dppx unit. 
  // This is equivalent to the DPR, and has the advantage of being intended for on-screen use,
  //
  // See the comments for the variable $defaultDevicePixelRatio for info about the JET default DPR.
  //
  // We use the following syntax in JET:
  //
  // - FF, IE9, chrome 29+ , use dpi units unless we can confirm all browsers support dppx
  //      @media only screen and (min-resolution: 144dpi)
  // - chrome before 29 and safari, both desktop and mobile for both
  //      @media only screen and (-webkit-min-device-pixel-ratio: 1.5)
  //
  // TODO: simplify depending on our final browser support matrix?
  // TODO: what about printing?

  
  $temp: "";

  @if ($queryMinWidth)
  {
    $temp: "(min-width: " + $queryMinWidth + " ) and ";
  }

  @if ($queryMaxWidth)
  {
    $temp: $temp + "(max-width: " + $queryMaxWidth + " ) and ";
  }

  $queryString1:  $temp + "(-webkit-min-device-pixel-ratio: " + $devicePixelRatio +")";
  $queryString2:  $temp + "(min-resolution: " + $devicePixelRatio * 96 + "dpi)";
  // some  browsers don't support dppx yet, however chrome nags you without dppx
  // https://code.google.com/p/chromium/issues/detail?id=336276
  $queryString3:  $temp + "(min-resolution: " + $devicePixelRatio + "dppx)";


  @media #{$queryString1},  
         #{$queryString2},  
         #{$queryString3} 
  {
    @content;
  }

  
}


//-------------------------------------------------------------------------------------------------
//
// This mixin generates css for high contrast icons. People often use 
// background images in css to show an icon. The difficulty with high contrast 
// mode is that on windows in high contrast mode the background images will 
// disappear on IE9 and Firefox. To test on windows you can hit the following to switch to 
// high contrast mode:left ALT + left SHIFT + PRINT SCREEN. 
//
// This mixin therefore does not use a background image to show an icon. 
//
// $width:                   the width the icon should be on the page
// $height:                  the height the icon should be on the page         
//-------------------------------------------------------------------------------------------------
@mixin oj-icon-base( $width, 
                     $height)
{
  // Using :before and content the image doesn't disappear in high contrast mode. 
  // However you don't have a property like background-size, 
  // instead you need to scale and translate the image with css transform 

  &
  {
    display:        $iconDisplay;
    width:          $width;
    height:         $height;
    overflow:       hidden;
    direction:      ltr;
    text-align:     center;
    @include oj-box-sizing-property(content-box);
    @content;
  }

  &:before
  {
    display: $iconDisplay;
    @include oj-box-sizing-property(content-box);
  }

}


@mixin oj-icon-media-query($queryMinWidth:     null,
                           $queryMaxWidth:     null)
{
  $query: "";


  @if ($queryMinWidth)
  {
    $query: "(min-width: " + $queryMinWidth + " )";
  }

  @if ($queryMaxWidth)
  {
    @if ($query != "")
    {
      $query: $query + " and ";
    }

    $query: $query + "(max-width: " + $queryMaxWidth + " )";
  }


  @if ($query != "")
  {
    @media #{$query} 
    {
      @content;
    }
  }
  @else
  {
    @content;
  }
}

  
//-------------------------------------------------------------------------------------------------
// This mixin can be used in conjuntion with a class created with the "oj-icon" mixin.
// For example JET uses the "oj-icon" mixin to create the '.oj-icon' class. 
// ".oj-icon" has the defaults for a high contrast image. 
//
// You can use this mixin ("oj-icon-content") to generate 
// a class with additions/overrides, which you can use in conjunction 
// with ".oj-icon". 
//
// For example let's say you used this mixin to generate a class ".binky-icon-hc". You
// could then put class="oj-icon binky-icon-hc" on your dom element. 
//
//
// $icon:                    the low res default icon. You pass in the "url" syntax as well, 
//                               like so: url("icon.png"). 
//                               You can also pass in multiple urls as a list:
//                                  (url("icon1.png" ),url("con2.png"))
// $iconRtl:                 optional right to left version of $icon
// $iconHiContrast:          the special high contrast icon, this icon is shown when 
//                               "oj-hicontrast" is placed on the body tag. This value can be null,
//                                in which case $icon will still show up. See above for syntax.
// $iconHiContrastRtl:       optional right to left version of $iconHiContrast
// $iconHiRes:               the high res icon. See above for syntax
// $iconHiResRtl:            optional right to left version of $iconHiRes
// $devicePixelRatio:        the device pixel ratio, used in the media query if there is 
//                                 a $icon passed in.  
// $highResProportion        the percentage to shrink the high res icon to. 
//                                 For example ".5" if the image will be half it's original size. 
//                                 ".25" if it will be a quarter of its original size.     
// $lowResProportion         the percentage to shrink the low res icon to. 
//                                 For example ".5" if the image will be half it's original size. 
//                                 ".25" if it will be a quarter of its original size.   
// $queryMinWidth:           media query min width
// $queryMaxWidth:           media query max width
// $iconFontFamily:          icon font family to use in high contrast 
// $iconFontChar:            icon font char to use in high contrast 
// $iconFontCharRtl:         optional right to left icon font char to use in high contrast 
// $iconFontSize:            size of icon font to use in high contrast         
//-------------------------------------------------------------------------------------------------
@mixin oj-icon-content ( $icon:              null, 
                         $iconRtl:           null,  
                         $iconHiContrast:    null,  
                         $iconHiContrastRtl: null,  
                         $iconHiRes:         null,  
                         $iconHiResRtl:      null,  
                         $devicePixelRatio:  $defaultDevicePixelRatio,
                         $highResProportion: .5,
                         $lowResProportion:  1,
                         $queryMinWidth:     null,
                         $queryMaxWidth:     null,
                         $iconFontFamily:    null,
                         $iconFontChar:      null,
                         $iconFontCharRtl:   null,
                         $iconFontSize:      null)
{

  // icon   icon@2x   icon@hc    in hc
  //  y/n     y/n       y        use icon@hc
  //  y       y         n        use icon@2x
  //  y       n         n        use icon
  //  n       y         n        use icon@2x


  @if ($icon)
  {
    @include oj-icon-media-query($queryMinWidth, $queryMaxWidth)
    {
      &
      {
        @content;
      }
      
      &:before
      {
        content: $icon;

        @include oj-rtl()
        {
          content: $iconRtl;
        }

        @if ($lowResProportion != 1)
        {
          $translatePercent: - percentage((1 - $lowResProportion)/2);
          // scale down the image and then move it to the top left corner 
          @include oj-transform-property(translate($translatePercent, $translatePercent) scale($lowResProportion));
        }
      }

      @if ($iconHiContrast)
      {
        .oj-hicontrast &:before
        {
          content: $iconHiContrast;

          @include oj-rtl()
          {
            content: $iconHiContrastRtl;
          }

          @if ($lowResProportion != 1)
          {
            $translatePercent: - percentage((1 - $lowResProportion)/2);
            // scale down the image and then move it to the top left corner 
            @include oj-transform-property(translate($translatePercent, $translatePercent) scale($lowResProportion));
          }
        }
      }
    }

    @if ($iconHiRes)
    {
      $translatePercent: - percentage((1 - $highResProportion)/2);

      // only generate the media queries if a low res icon is also defined
      @include oj-icon-hi-res-media-query($devicePixelRatio, $queryMinWidth, $queryMaxWidth)
      {

        &:before
        {
          content: $iconHiRes;
          // scale down the image and then move it to the top left corner 
          @include oj-transform-property(translate($translatePercent, $translatePercent) scale($highResProportion));
          
          @include oj-rtl()
          {
            content: $iconHiResRtl;
          }
        }

        @if ($iconHiContrast)
        {
          .oj-hicontrast &:before
          {
            @if ($lowResProportion != 1)
            {
              $translatePercent: - percentage((1 - $lowResProportion)/2);
              // scale down the image and then move it to the top left corner 
              @include oj-transform-property(translate($translatePercent, $translatePercent) scale($lowResProportion));
            }
            @else
            {
              @include oj-transform-property(none);
            }
          }
        }
      }
    }  
  }
  @else
  { 

    @include oj-icon-media-query($queryMinWidth, $queryMaxWidth)
    {
      &
      {
        @content;
      }

      .oj-hicontrast &:before
      {
        content: $iconHiContrast;
        
        @include oj-rtl()
        {
          content: $iconHiContrastRtl;
        }
      }

      @if  ($iconHiRes)
      {
        // TODO repeating the code in these 2 if blocks. Use mixin?

        $translatePercent: - percentage((1 - $highResProportion)/2);

        &:before
        {
          content: $iconHiRes;
          // scale down the image and then move it to the top left corner 
          @include oj-transform-property(translate($translatePercent, $translatePercent) scale($highResProportion));

          
          @include oj-rtl()
          {
            content: $iconHiResRtl;
          }
        }

        @if ($iconHiContrast)
        {
          // we don't support high res high contrast images
          .oj-hicontrast &:before
          {
            @if ($lowResProportion != 1)
            {
              $translatePercent: - percentage((1 - $lowResProportion)/2);
              // scale down the image and then move it to the top left corner 
              @include oj-transform-property(translate($translatePercent, $translatePercent) scale($lowResProportion));
            }
            @else
            {
              @include oj-transform-property(none);
            }
          }
        }
      }
    }
  }

  @if $iconFontChar
  {
    @include oj-icon-media-query($queryMinWidth, $queryMaxWidth)
    {
      .oj-hicontrast &
      {
        font-family: $iconFontFamily;
        font-size: $iconFontSize;
        text-align: center;
        line-height: 1;
      }

      .oj-hicontrast &:before
      {
        content: $iconFontChar;
        @include oj-transform-property(none);

        @include oj-rtl()
        {
          content: $iconFontCharRtl;
        }
      }
    }
  }
}

//-------------------------------------------------------------------------------------------------
//
// This mixin generates css for icon fonts
//
// $width:                   the width the icon should be on the page
// $height:                  the height the icon should be on the page   
// $fontSize:                the font size
// $fontFamily:              the font family         
//-------------------------------------------------------------------------------------------------
@mixin oj-icon-font-base($fontFamily,
                         $fontSize:   null,
                         $fontWeight: normal,
                         $color:      null)
{

  &
  {
    font-family:    $fontFamily;
    font-size:      $fontSize;
    line-height:    1;
    display:        $iconDisplay;
    font-weight:    $fontWeight;
    speak:          none;
    font-style:     normal;
    font-variant:   normal;
    text-transform: none;
    color:          $color;
    text-align:     center; 
    @include oj-box-sizing-property(content-box);
    // TODO: shouldn't be using font-smoothing, any way to fix?
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  &:before{
    display: $iconDisplay;
  }

}


